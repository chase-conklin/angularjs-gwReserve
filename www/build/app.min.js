"use strict";!function(o){o.module("application",["ngRoute"]).constant("applicationSettings",{applicationTitle:"Geekwise Room Reserve App",getFirebaseRestUrl:function(o){return"https://confdeconflictor.firebaseio.com/"+o+".json"},getImagePath:function(o){return"www/assets/images/"+o}}).config(["$locationProvider","$routeProvider",function(o,t){o.html5Mode(!0),t.when("/login",{template:"<gw-login></gw-login>"}).when("/room/:id",{template:"<gw-room></gw-room>"}).otherwise({templateUrl:"www/app/components/welcome/welcome.htm"})}])}(window.angular),function(o){o.module("application").controller("exerciseOneController",["$routeParams","exerciseService",function(o,t){var n=this;this.exerciseService=t,this.title="Exercise 1, in the controller",this.clickAction=function(){console.log(n)},this.students=[{name:"John"},{name:"Josh"},{name:"Mack"}]}])}(window.angular),function(o){o.module("application").controller("exerciseTwoController",["$routeParams","exerciseService","exerciseTwoService",function(o,t,n){var e=this;this.exerciseTwoService=n,this.exerciseService=t,this.title="Exercise 2";this.possibleColors=[{name:"Brown",hex:"#a52a2a"},{name:"Blue",hex:"#0000ff"},{name:"Gainsboro",hex:"#dcdcdc"}],this._getRandomColorFromCollection=function(){return e.possibleColors[Math.floor(Math.random()*e.possibleColors.length)]},this.colorFilterChanged=function(){e.filter.color||delete e.filter.color},this.buttonText="Button Text",this.buttonMouseEnter=function(o){this.buttonText="Rolled Over"},this.buttonResetClick=function(){e.buttonText="Button Text"},this._createObject=function(){return{name:"Obj"+(e.objectArray.length+1),clickCount:0,color:e._getRandomColorFromCollection().hex}},this.objectArray=[],this.controllerInitObject=this._createObject(),this.objectArray.push(this.controllerInitObject),this.addNewObject=function(){this.objectArray.push(this._createObject()),console.log(this.objectArray)},this.incrClickCount=function(o){o.clickCount++,console.log([o.name,o.clickCount])}}])}(window.angular),function(o){o.module("application").service("exerciseService",function(){function o(){this.loggedInUser={name:"Coolguy",photo:"https://unsplash.com/photos/gwHLF1zqQ9w",loginTime:Date.now()}}function t(){this.loggedInUser={}}function n(){console.log("Service Works!")}this.loggedInUser={},this.login=o,this.logout=t,this.printConsole=n}).factory("exerciseService",function(){function o(){return e}function t(){e={name:"Ted",photo:"https://unsplash.com/photos/gwHLF1zqQ9w",loginTime:Date.now()}}function n(){e={}}return{getLoggedInUser:o,login:t,logout:n};var e})}(window.angular),function(o){o.module("application").service("exerciseTwoService",function(){})}(window.angular),function(o){o.module("application").component("gwFooter",{templateUrl:"www/app/components/footer/footer.htm",controller:"footerComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("footerComponentController",function(){console.log("footerComponentController loaded here")})}(window.angular),function(o){o.module("application").component("gwLogin",{templateUrl:"www/app/components/login/login.htm",controller:"loginComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("loginComponentController",["$scope","loginService",function(o,t){this.loginService=t,this.refresh=function(){o.$apply()}}])}(window.angular),function(o){o.module("application").factory("loginService",["$rootScope",function(o){function t(){return i}function n(t){i=t,o.$apply()}function e(o){return firebase.auth().signInWithPopup(new firebase.auth.GithubAuthProvider)}function r(){return i={},firebase.auth().signOut()}var i=null;return firebase.auth().onAuthStateChanged(n),{getLoggedInUser:t,login:e,logout:r}}])}(window.angular),function(o){o.module("application").component("gwNavigation",{templateUrl:"www/app/components/navigation/navigation.htm",controller:"navigationComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("navigationComponentController",["$scope","$location","navigationService","loginService","roomService",function(t,n,e,r,i){this.$onInit=function(){this.navigationService=e,this.loginService=r,this.roomService=i,this.refresh=function(){t.$apply()};var n={title:"Welcome",url:"/welcome"};this.navigationService.addNavigationItem(n),i.fetchRoomsFromDB().then(function(t){o.forEach(t,function(o){var t={title:o.name,url:"/room/"+o.id};e.addNavigationItem(t)})}).catch(function(o){return console.error(o)});var l={title:"About",url:"/about"};e.addNavigationItem(l)},this.isItemActive=function(o){return o===n.path()}}])}(window.angular),function(o){o.module("application").factory("navigationService",function(){function o(){return e}function t(o){e||(e=[]),e.push(o)}function n(o){e.forEach(function(t,n){t.id===o.id&&e.splice(n,1)})}return{getNavigation:o,addNavigationItem:t,removeNavigationItem:n};var e})}(window.angular),function(o){o.module("application").component("gwRoom",{templateUrl:"www/app/components/room/room.htm",controller:"roomComponentController",controllerAs:"ctrl"})}(window.angular),function(o){o.module("application").controller("roomComponentController",["applicationSettings","roomService","$routeParams",function(o,t,n){this.$onInit=function(){var e=this;console.log(this),this.loading=!0,t.getRoomById(n.id).then(function(t){e.room=t,e.room.picture=o.getImagePath(e.room.picture),e.loading=!1})}}])}(window.angular),function(o){o.module("application").factory("roomService",["$http","applicationSettings",function(t,n){function e(){return c}function r(o){return t.get(n.getFirebaseRestUrl("rooms/"+o)).then(function(o){return o.data}).then(function(t){return t.id=o,t})}function i(){return t.get(n.getFirebaseRestUrl("rooms")).then(function(o){return o.data}).then(function(t){return o.forEach(t,function(o,t){o.id=t}),t})}function l(o,e){return r(o).then(function(r){return t.post(n.getFirebaseRestUrl("rooms/"+o+"/reservations/"+a()),e)}).catch(function(o){return console.log(o)})}function a(o){var t=void 0;return t=o?new Date(o).toDateString():(new Date).toDateString(),t=t.replace(/ /g,"")}return{writeRoomReservation:l,getRooms:e,getRoomById:r,fetchRoomsFromDB:i};var c}])}(window.angular),function(o){o.module("application").component("gwRoomReservationForm",{templateUrl:"www/app/components/room/room-reservation-form/room-reservation-form.htm",controller:"roomReservationFormComponentController",controllerAs:"ctrl",bindings:{room:"<"}})}(window.angular),function(o){o.module("application").controller("roomReservationFormComponentController",["roomService",function(o){this.$onInit=function(){this.startTime=new Date,this.startTime.setHours(0,0,0,0),this.endTime=new Date,this.endTime.setHours(0,0,0,0),this.reserveReasons=["Birthday","Conference","Interview","Scrum Meeting","Honeymoon"]},this.roomSubmission=function(){if(console.log("Reserving for",this.room),console.log(this.myForm),this.getMinTime()>=this.endTime)return this.myForm.endTime.$setValidity("min",!1),alert("Message from controller: time invalid");if(this.myForm.$invalid)return alert("Message from controller: form invalid");var t={};return t.email=this.email1,t.startTime=this.startTime,t.endTime=this.endTime,t.specialInstructions=this.specialInstructions,t.reserveReason=this.reserveReason,o.writeRoomReservation(this.room.id,t).catch(function(o){return alert(o.data.error)})},this.getMinTime=function(){var o=new Date(this.startTime);return o.setHours(o.getHours()+1),o}}])}(window.angular),function(o){o.module("application").component("gwRoomReservationHeader",{templateUrl:"www/app/components/room/room-reservation-header/room-reservation-header.htm",controller:"roomReservationHeaderComponentController",controllerAs:"ctrl",bindings:{room:"@"}})}(window.angular),function(o){o.module("application").controller("roomReservationHeaderComponentController",function(){console.log("header controller working!")})}(window.angular),function(o){o.module("application").component("gwRoomReservationList",{templateUrl:"www/app/components/room/room-reservation-list/room-reservation-list.htm",controller:"roomReservationListComponentController",controllerAs:"ctrl",require:{parentRoomController:"^gwRoom"}})}(window.angular),function(o){o.module("application").controller("roomReservationListComponentController",function(){console.log("list controller working!")})}(window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5taW4uanMiLCJpbmRleC5qcyIsImNvbnRyb2xsZXJzL2V4ZXJjaXNlT25lQ29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL2V4ZXJjaXNlVHdvQ29udHJvbGxlci5qcyIsInNlcnZpY2VzL2V4ZXJjaXNlU2VydmljZS5qcyIsInNlcnZpY2VzL2V4ZXJjaXNlVHdvU2VydmljZS5qcyIsImNvbXBvbmVudHMvZm9vdGVyL2Zvb3Rlci5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9sb2dpbi9sb2dpbi5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9sb2dpbi9sb2dpbi5zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24uY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9uYXZpZ2F0aW9uL25hdmlnYXRpb24uY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL3Jvb20vcm9vbS5jb21wb25lbnQuanMiLCJjb21wb25lbnRzL3Jvb20vcm9vbS5jb250cm9sbGVyLmpzIiwiY29tcG9uZW50cy9yb29tL3Jvb20uc2VydmljZS5qcyIsImNvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWZvcm0vcm9vbS1yZXNlcnZhdGlvbi1mb3JtLWNvbXBvbmVudC5qcyIsImNvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWZvcm0vcm9vbS1yZXNlcnZhdGlvbi1mb3JtLWNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3Jvb20vcm9vbS1yZXNlcnZhdGlvbi1oZWFkZXIvcm9vbS1yZXNlcnZhdGlvbi1oZWFkZXItY29tcG9uZW50LmpzIiwiY29tcG9uZW50cy9yb29tL3Jvb20tcmVzZXJ2YXRpb24taGVhZGVyL3Jvb20tcmVzZXJ2YXRpb24taGVhZGVyLWNvbnRyb2xsZXIuanMiLCJjb21wb25lbnRzL3Jvb20vcm9vbS1yZXNlcnZhdGlvbi1saXN0L3Jvb20tcmVzZXJ2YXRpb24tbGlzdC1jb21wb25lbnQuanMiLCJjb21wb25lbnRzL3Jvb20vcm9vbS1yZXNlcnZhdGlvbi1saXN0L3Jvb20tcmVzZXJ2YXRpb24tbGlzdC1jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsImFwcGxpY2F0aW9uVGl0bGUiLCJnZXRGaXJlYmFzZVJlc3RVcmwiLCJzdWZmaXgiLCJnZXRJbWFnZVBhdGgiLCJmaWxlIiwiY29uZmlnIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCIkcm91dGVQcm92aWRlciIsImh0bWw1TW9kZSIsIndoZW4iLCJ0ZW1wbGF0ZSIsIm90aGVyd2lzZSIsInRlbXBsYXRlVXJsIiwid2luZG93IiwiY29udHJvbGxlciIsIiRyb3V0ZVBhcmFtcyIsImV4ZXJjaXNlU2VydmljZSIsIl90aGlzIiwidGhpcyIsInRpdGxlIiwiY2xpY2tBY3Rpb24iLCJjb25zb2xlIiwibG9nIiwic3R1ZGVudHMiLCJuYW1lIiwiZXhlcmNpc2VUd29TZXJ2aWNlIiwicG9zc2libGVDb2xvcnMiLCJoZXgiLCJfZ2V0UmFuZG9tQ29sb3JGcm9tQ29sbGVjdGlvbiIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImxlbmd0aCIsImNvbG9yRmlsdGVyQ2hhbmdlZCIsImZpbHRlciIsImNvbG9yIiwiYnV0dG9uVGV4dCIsImJ1dHRvbk1vdXNlRW50ZXIiLCJhcmciLCJidXR0b25SZXNldENsaWNrIiwiX2NyZWF0ZU9iamVjdCIsIm9iamVjdEFycmF5IiwiY2xpY2tDb3VudCIsImNvbnRyb2xsZXJJbml0T2JqZWN0IiwicHVzaCIsImFkZE5ld09iamVjdCIsImluY3JDbGlja0NvdW50Iiwib2JqIiwic2VydmljZSIsIl9sb2dpbiIsImxvZ2dlZEluVXNlciIsInBob3RvIiwibG9naW5UaW1lIiwiRGF0ZSIsIm5vdyIsIl9sb2dvdXQiLCJwcmludENvbnNvbGUiLCJsb2dpbiIsImxvZ291dCIsImZhY3RvcnkiLCJnZXRMb2dnZWRJblVzZXIiLCJjb21wb25lbnQiLCJjb250cm9sbGVyQXMiLCIkc2NvcGUiLCJsb2dpblNlcnZpY2UiLCJyZWZyZXNoIiwiJGFwcGx5IiwiJHJvb3RTY29wZSIsInVwZGF0ZUxvZ2luU3RhdHVzIiwiYXV0aGVudGljYXRlZFVzZXIiLCJjYWxsYmFjayIsImZpcmViYXNlIiwiYXV0aCIsInNpZ25JbldpdGhQb3B1cCIsIkdpdGh1YkF1dGhQcm92aWRlciIsInNpZ25PdXQiLCJvbkF1dGhTdGF0ZUNoYW5nZWQiLCIkbG9jYXRpb24iLCJuYXZpZ2F0aW9uU2VydmljZSIsInJvb21TZXJ2aWNlIiwiJG9uSW5pdCIsIndlbGNvbWVJdGVtIiwidXJsIiwiYWRkTmF2aWdhdGlvbkl0ZW0iLCJmZXRjaFJvb21zRnJvbURCIiwidGhlbiIsInJvb21zIiwiZm9yRWFjaCIsIm9iamVjdFZhbHVlIiwiaXRlbVRvQWRkIiwiaWQiLCJjYXRjaCIsImUiLCJlcnJvciIsImFib3V0SXRlbSIsImlzSXRlbUFjdGl2ZSIsInBhdGgiLCJnZXROYXZpZ2F0aW9uIiwibmF2aWdhdGlvbkl0ZW1zIiwiaXRlbSIsInJlbW92ZU5hdmlnYXRpb25JdGVtIiwiaXRlbUluTmF2aWdhdGlvbiIsImluZGV4Iiwic3BsaWNlIiwiYXBwbGljYXRpb25TZXR0aW5ncyIsImxvYWRpbmciLCJnZXRSb29tQnlJZCIsInJvb21SZXN1bHQiLCJyb29tIiwicGljdHVyZSIsIiRodHRwIiwiZ2V0Um9vbXMiLCJnZXQiLCJyZXNwb25zZSIsImRhdGEiLCJ2YWx1ZSIsImtleSIsIndyaXRlUm9vbVJlc2VydmF0aW9uIiwicmVzZXJ2YXRpb24iLCJwb3N0IiwiZ2V0Um9vbURhdGVLZXkiLCJkYXRlIiwiZGF0ZUtleSIsInRvRGF0ZVN0cmluZyIsInJlcGxhY2UiLCJiaW5kaW5ncyIsInN0YXJ0VGltZSIsInNldEhvdXJzIiwiZW5kVGltZSIsInJlc2VydmVSZWFzb25zIiwicm9vbVN1Ym1pc3Npb24iLCJteUZvcm0iLCJnZXRNaW5UaW1lIiwiJHNldFZhbGlkaXR5IiwiYWxlcnQiLCIkaW52YWxpZCIsInJlc2VydmF0aW9uU3VibWlzc2lvbiIsImVtYWlsIiwiZW1haWwxIiwic3BlY2lhbEluc3RydWN0aW9ucyIsInJlc2VydmVSZWFzb24iLCJnZXRIb3VycyIsInJlcXVpcmUiLCJwYXJlbnRSb29tQ29udHJvbGxlciJdLCJtYXBwaW5ncyI6IkFBQUEsY0NBRSxTQUFTQSxHQUNWQSxFQUNFQyxPQUFPLGVBQWdCLFlBRXZCQyxTQUFTLHVCQUNUQyxpQkFBbUIsNEJBRW5CQyxtQkFBcUIsU0FBU0MsR0FJN0IsTUFIZSwyQ0FHQ0EsRUFGSixTQUtiQyxhQUFlLFNBQVNDLEdBQ3ZCLE1BQUEscUJBQTRCQSxLQUk3QkMsUUFBQUEsb0JBQUFBLGlCQUFPLFNBQVNDLEVBQW1CQyxHQUNuQ0QsRUFBa0JFLFdBQVUsR0FFNUJELEVBZ0JFRSxLQUFLLFVBQ0xDLFNBQVksMEJBRVpELEtBQUssYUFNTEMsU0FBWSx3QkFFWkMsV0FDQUMsWUFBZSwrQ0FHakJDLE9BQU9oQixTQ3JEVCxTQUFVQSxHQUNQQSxFQUNLQyxPQUFPLGVBQ1BnQixXQUFXLHlCQUFBLGVBQUEsa0JBQXlCLFNBQVNDLEVBQWNDLEdBQWlCLEdBQUFDLEdBQUFDLElBRXpFQSxNQUFLRixnQkFBa0JBLEVBRTdCRSxLQUFLQyxNQUFRLGdDQUViRCxLQUFLRSxZQUFjLFdBQ2xCQyxRQUFRQyxJQUFSTCxJQUdEQyxLQUFLSyxXQUNGQyxLQUFNLFNBQ05BLEtBQU0sU0FDTkEsS0FBTSxhQUdiWCxPQUFPaEIsU0NuQlIsU0FBVUEsR0FDUEEsRUFDS0MsT0FBTyxlQUNQZ0IsV0FBVyx5QkFBQSxlQUFBLGtCQUFBLHFCQUF5QixTQUFTQyxFQUFjQyxFQUFpQlMsR0FBb0IsR0FBQVIsR0FBQUMsSUFDN0ZBLE1BQUtPLG1CQUFxQkEsRUFFMUJQLEtBQUtGLGdCQUFrQkEsRUFFdkJF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T0FDZmdGLFNBQ0lDLHFCQUF1QixjQUdyQ2xJLE9BQU9oQixTQ1hSLFNBQVVBLEdBQ1BBLEVBQ0tDLE9BQU8sZUFFUGdCLFdBQVcseUNBQTBDLFdBQ2xETyxRQUFRQyxJQUFJLCtCQUd0QlQsT0FBT2hCIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cdGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIiwgW1wibmdSb3V0ZVwiXSkuY29uc3RhbnQoXCJhcHBsaWNhdGlvblNldHRpbmdzXCIsIHtcblx0XHRhcHBsaWNhdGlvblRpdGxlOiBcIkdlZWt3aXNlIFJvb20gUmVzZXJ2ZSBBcHBcIixcblxuXHRcdGdldEZpcmViYXNlUmVzdFVybDogZnVuY3Rpb24gZ2V0RmlyZWJhc2VSZXN0VXJsKHN1ZmZpeCkge1xuXHRcdFx0dmFyIHByZWZpeCA9IFwiaHR0cHM6Ly9jb25mZGVjb25mbGljdG9yLmZpcmViYXNlaW8uY29tL1wiO1xuXHRcdFx0dmFyIGV4dCA9IFwiLmpzb25cIjtcblxuXHRcdFx0cmV0dXJuIHByZWZpeCArIHN1ZmZpeCArIGV4dDtcblx0XHR9LFxuXG5cdFx0Z2V0SW1hZ2VQYXRoOiBmdW5jdGlvbiBnZXRJbWFnZVBhdGgoZmlsZSkge1xuXHRcdFx0cmV0dXJuIFwid3d3L2Fzc2V0cy9pbWFnZXMvXCIgKyBmaWxlO1xuXHRcdH1cblx0fSkuY29uZmlnKGZ1bmN0aW9uICgkbG9jYXRpb25Qcm92aWRlciwgJHJvdXRlUHJvdmlkZXIpIHtcblx0XHQkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XG5cblx0XHQkcm91dGVQcm92aWRlclxuXHRcdC8vIC53aGVuKFwiL3dlbGNvbWVcIiwge1xuXHRcdC8vIFx0dGVtcGxhdGVVcmwgIDogXCJ3d3cvYXBwL3BhcnRpYWxzL3dlbGNvbWUuaHRtXCJcblx0XHQvLyB9KVxuXHRcdC8vIC53aGVuKFwiL2V4ZXJjaXNlMVwiLCB7XG5cdFx0Ly8gXHQvLyBzaW1wbGUgY29udHJvbGxlclxuXHRcdC8vIFx0dGVtcGxhdGVVcmwgIDogJ3d3dy9hcHAvcGFydGlhbHMvZXhlcmNpc2UxLmh0bScsXG5cdFx0Ly8gXHRjb250cm9sbGVyICAgOiBcImV4ZXJjaXNlT25lQ29udHJvbGxlclwiLFxuXHRcdC8vIFx0Y29udHJvbGxlckFzIDogXCJjdHJsXCIsXG5cdFx0Ly8gfSlcblx0XHQvLyAud2hlbihcIi9leGVyY2lzZTJcIiwge1xuXHRcdC8vIFx0Ly8gbW9yZSBjb21wbGV4IGNvbnRyb2xsZXJcblx0XHQvLyBcdHRlbXBsYXRlVXJsICA6ICd3d3cvYXBwL3BhcnRpYWxzL2V4ZXJjaXNlMi5odG0nLFxuXHRcdC8vIFx0Y29udHJvbGxlciAgIDogXCJleGVyY2lzZVR3b0NvbnRyb2xsZXJcIixcblx0XHQvLyBcdGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiXG5cdFx0Ly8gfSlcblx0XHQud2hlbihcIi9sb2dpblwiLCB7XG5cdFx0XHR0ZW1wbGF0ZTogXCI8Z3ctbG9naW4+PC9ndy1sb2dpbj5cIlxuXHRcdH0pLndoZW4oXCIvcm9vbS86aWRcIiwge1xuXHRcdFx0Ly8gcmVzb2x2ZSAgIDoge1xuXHRcdFx0Ly8gXHRpc0xvZ2dlZEluIDogZnVuY3Rpb24gKCRsb2NhdGlvbiwgbG9naW5TZXJ2aWNlKSB7XG5cdFx0XHQvLyBcdFx0cmV0dXJuICFsb2dpblNlcnZpY2UuZ2V0TG9nZ2VkSW5Vc2VyKCkgPyAkbG9jYXRpb24ucGF0aChcIi93ZWxjb21lXCIpIDogdHJ1ZTtcblx0XHRcdC8vIFx0fVxuXHRcdFx0Ly8gfSxcblx0XHRcdHRlbXBsYXRlOiBcIjxndy1yb29tPjwvZ3ctcm9vbT5cIlxuXHRcdH0pLm90aGVyd2lzZSh7XG5cdFx0XHR0ZW1wbGF0ZVVybDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvd2VsY29tZS93ZWxjb21lLmh0bVwiXG5cdFx0fSk7XG5cdH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuY29udHJvbGxlcihcImV4ZXJjaXNlT25lQ29udHJvbGxlclwiLCBmdW5jdGlvbiAoJHJvdXRlUGFyYW1zLCBleGVyY2lzZVNlcnZpY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLmV4ZXJjaXNlU2VydmljZSA9IGV4ZXJjaXNlU2VydmljZTtcblxuICAgICAgICB0aGlzLnRpdGxlID0gXCJFeGVyY2lzZSAxLCBpbiB0aGUgY29udHJvbGxlclwiO1xuXG4gICAgICAgIHRoaXMuY2xpY2tBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpcyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zdHVkZW50cyA9IFt7IG5hbWU6IFwiSm9oblwiIH0sIHsgbmFtZTogXCJKb3NoXCIgfSwgeyBuYW1lOiBcIk1hY2tcIiB9XTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbnRyb2xsZXIoXCJleGVyY2lzZVR3b0NvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKCRyb3V0ZVBhcmFtcywgZXhlcmNpc2VTZXJ2aWNlLCBleGVyY2lzZVR3b1NlcnZpY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLmV4ZXJjaXNlVHdvU2VydmljZSA9IGV4ZXJjaXNlVHdvU2VydmljZTtcblxuICAgICAgICB0aGlzLmV4ZXJjaXNlU2VydmljZSA9IGV4ZXJjaXNlU2VydmljZTtcblxuICAgICAgICB0aGlzLnRpdGxlID0gXCJFeGVyY2lzZSAyXCI7XG5cbiAgICAgICAgdmFyIG9yaWdpbmFsQnV0dG9uVGV4dCA9IFwiQnV0dG9uIFRleHRcIjtcblxuICAgICAgICB0aGlzLnBvc3NpYmxlQ29sb3JzID0gW3tcbiAgICAgICAgICAgIG5hbWU6IFwiQnJvd25cIixcbiAgICAgICAgICAgIGhleDogXCIjYTUyYTJhXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJCbHVlXCIsXG4gICAgICAgICAgICBoZXg6IFwiIzAwMDBmZlwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiR2FpbnNib3JvXCIsXG4gICAgICAgICAgICBoZXg6IFwiI2RjZGNkY1wiXG4gICAgICAgIH1dO1xuXG4gICAgICAgIHRoaXMuX2dldFJhbmRvbUNvbG9yRnJvbUNvbGxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmFuZG9tQ29sb3IgPSBfdGhpcy5wb3NzaWJsZUNvbG9yc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBfdGhpcy5wb3NzaWJsZUNvbG9ycy5sZW5ndGgpXTtcbiAgICAgICAgICAgIHJldHVybiByYW5kb21Db2xvcjtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNvbG9yRmlsdGVyQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuZmlsdGVyLmNvbG9yKSBkZWxldGUgX3RoaXMuZmlsdGVyLmNvbG9yO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IG9yaWdpbmFsQnV0dG9uVGV4dDtcblxuICAgICAgICB0aGlzLmJ1dHRvbk1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvblRleHQgPSBcIlJvbGxlZCBPdmVyXCI7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5idXR0b25SZXNldENsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYnV0dG9uVGV4dCA9IG9yaWdpbmFsQnV0dG9uVGV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9jcmVhdGVPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiT2JqXCIgKyAoX3RoaXMub2JqZWN0QXJyYXkubGVuZ3RoICsgMSksXG4gICAgICAgICAgICAgICAgY2xpY2tDb3VudDogMCxcbiAgICAgICAgICAgICAgICBjb2xvcjogX3RoaXMuX2dldFJhbmRvbUNvbG9yRnJvbUNvbGxlY3Rpb24oKS5oZXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vYmplY3RBcnJheSA9IFtdO1xuXG4gICAgICAgIHRoaXMuY29udHJvbGxlckluaXRPYmplY3QgPSB0aGlzLl9jcmVhdGVPYmplY3QoKTtcblxuICAgICAgICB0aGlzLm9iamVjdEFycmF5LnB1c2godGhpcy5jb250cm9sbGVySW5pdE9iamVjdCk7XG5cbiAgICAgICAgdGhpcy5hZGROZXdPYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm9iamVjdEFycmF5LnB1c2godGhpcy5fY3JlYXRlT2JqZWN0KCkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5vYmplY3RBcnJheSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5pbmNyQ2xpY2tDb3VudCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIG9iai5jbGlja0NvdW50Kys7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhbb2JqLm5hbWUsIG9iai5jbGlja0NvdW50XSk7XG4gICAgICAgIH07XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5zZXJ2aWNlKFwiZXhlcmNpc2VTZXJ2aWNlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sb2dnZWRJblVzZXIgPSB7fTtcbiAgICAgICAgdGhpcy5sb2dpbiA9IF9sb2dpbjtcbiAgICAgICAgdGhpcy5sb2dvdXQgPSBfbG9nb3V0O1xuICAgICAgICB0aGlzLnByaW50Q29uc29sZSA9IHByaW50Q29uc29sZTtcblxuICAgICAgICBmdW5jdGlvbiBfbG9naW4oKSB7XG4gICAgICAgICAgICBkZWJ1Z2dlcjtcblxuICAgICAgICAgICAgdGhpcy5sb2dnZWRJblVzZXIgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDb29sZ3V5XCIsXG4gICAgICAgICAgICAgICAgcGhvdG86IFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2d3SExGMXpxUTl3XCIsXG4gICAgICAgICAgICAgICAgbG9naW5UaW1lOiBEYXRlLm5vdygpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gX2xvZ291dCgpIHtcbiAgICAgICAgICAgIHRoaXMubG9nZ2VkSW5Vc2VyID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcmludENvbnNvbGUoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlcnZpY2UgV29ya3MhXCIpO1xuICAgICAgICB9XG4gICAgfSkuZmFjdG9yeShcImV4ZXJjaXNlU2VydmljZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRMb2dnZWRJblVzZXI6IGdldExvZ2dlZEluVXNlcixcbiAgICAgICAgICAgIGxvZ2luOiBsb2dpbixcbiAgICAgICAgICAgIGxvZ291dDogbG9nb3V0XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGxvZ2dlZEluVXNlciA9IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldExvZ2dlZEluVXNlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2dnZWRJblVzZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dpbigpIHtcbiAgICAgICAgICAgIGRlYnVnZ2VyO1xuXG4gICAgICAgICAgICBsb2dnZWRJblVzZXIgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZWRcIixcbiAgICAgICAgICAgICAgICBwaG90bzogXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvZ3dITEYxenFROXdcIixcbiAgICAgICAgICAgICAgICBsb2dpblRpbWU6IERhdGUubm93KClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICBsb2dnZWRJblVzZXIgPSB7fTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuc2VydmljZShcImV4ZXJjaXNlVHdvU2VydmljZVwiLCBmdW5jdGlvbiAoKSB7fSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5jb21wb25lbnQoXCJnd0Zvb3RlclwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcInd3dy9hcHAvY29tcG9uZW50cy9mb290ZXIvZm9vdGVyLmh0bVwiLFxuICAgICAgICBjb250cm9sbGVyOiBcImZvb3RlckNvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgY29udHJvbGxlckFzOiBcImN0cmxcIlxuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuY29udHJvbGxlcihcImZvb3RlckNvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKCkge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiZm9vdGVyQ29tcG9uZW50Q29udHJvbGxlciBsb2FkZWQgaGVyZVwiKTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbXBvbmVudChcImd3TG9naW5cIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uaHRtXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IFwibG9naW5Db21wb25lbnRDb250cm9sbGVyXCIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbnRyb2xsZXIoXCJsb2dpbkNvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKCRzY29wZSwgbG9naW5TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMubG9naW5TZXJ2aWNlID0gbG9naW5TZXJ2aWNlO1xuXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmZhY3RvcnkoXCJsb2dpblNlcnZpY2VcIiwgZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcbiAgICAgICAgdmFyIGxvZ2dlZEluVXNlciA9IG51bGw7XG4gICAgICAgIHZhciBub3RpZnlDb250cm9sbGVyQ2FsbGJhY2sgPSBudWxsO1xuXG4gICAgICAgIC8vIHdhdGNoZXMgZmlyZWJhc2UgYXV0aGVudGljYXRpb25cbiAgICAgICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZCh1cGRhdGVMb2dpblN0YXR1cyk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldExvZ2dlZEluVXNlcjogZ2V0TG9nZ2VkSW5Vc2VyLFxuICAgICAgICAgICAgbG9naW46IGxvZ2luLFxuICAgICAgICAgICAgbG9nb3V0OiBsb2dvdXRcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRMb2dnZWRJblVzZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9nZ2VkSW5Vc2VyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTG9naW5TdGF0dXMoYXV0aGVudGljYXRlZFVzZXIpIHtcbiAgICAgICAgICAgIGxvZ2dlZEluVXNlciA9IGF1dGhlbnRpY2F0ZWRVc2VyO1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGxvZ2luKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25JbldpdGhQb3B1cChuZXcgZmlyZWJhc2UuYXV0aC5HaXRodWJBdXRoUHJvdmlkZXIoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBsb2dvdXQoKSB7XG4gICAgICAgICAgICBsb2dnZWRJblVzZXIgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZS5hdXRoKCkuc2lnbk91dCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5jb21wb25lbnQoXCJnd05hdmlnYXRpb25cIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLmh0bVwiLFxuICAgICAgICBjb250cm9sbGVyOiBcIm5hdmlnYXRpb25Db21wb25lbnRDb250cm9sbGVyXCIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCJcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbnRyb2xsZXIoXCJuYXZpZ2F0aW9uQ29tcG9uZW50Q29udHJvbGxlclwiLCBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sIG5hdmlnYXRpb25TZXJ2aWNlLCBsb2dpblNlcnZpY2UsIHJvb21TZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2UgPSBuYXZpZ2F0aW9uU2VydmljZTtcbiAgICAgICAgICAgIHRoaXMubG9naW5TZXJ2aWNlID0gbG9naW5TZXJ2aWNlO1xuICAgICAgICAgICAgdGhpcy5yb29tU2VydmljZSA9IHJvb21TZXJ2aWNlO1xuXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHdlbGNvbWVJdGVtID0ge1xuICAgICAgICAgICAgICAgIHRpdGxlOiBcIldlbGNvbWVcIixcbiAgICAgICAgICAgICAgICB1cmw6IFwiL3dlbGNvbWVcIlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0aW9uU2VydmljZS5hZGROYXZpZ2F0aW9uSXRlbSh3ZWxjb21lSXRlbSk7XG5cbiAgICAgICAgICAgIHJvb21TZXJ2aWNlLmZldGNoUm9vbXNGcm9tREIoKS50aGVuKGZ1bmN0aW9uIChyb29tcykge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb29tcywgZnVuY3Rpb24gKG9iamVjdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpdGVtVG9BZGQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb2JqZWN0VmFsdWUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXCIvcm9vbS9cIiArIG9iamVjdFZhbHVlLmlkXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvblNlcnZpY2UuYWRkTmF2aWdhdGlvbkl0ZW0oaXRlbVRvQWRkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGFib3V0SXRlbSA9IHtcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJBYm91dFwiLFxuICAgICAgICAgICAgICAgIHVybDogXCIvYWJvdXRcIlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgbmF2aWdhdGlvblNlcnZpY2UuYWRkTmF2aWdhdGlvbkl0ZW0oYWJvdXRJdGVtKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmlzSXRlbUFjdGl2ZSA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwgPT09ICRsb2NhdGlvbi5wYXRoKCk7XG4gICAgICAgIH07XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5mYWN0b3J5KFwibmF2aWdhdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0TmF2aWdhdGlvbjogZ2V0TmF2aWdhdGlvbixcbiAgICAgICAgICAgIGFkZE5hdmlnYXRpb25JdGVtOiBhZGROYXZpZ2F0aW9uSXRlbSxcbiAgICAgICAgICAgIHJlbW92ZU5hdmlnYXRpb25JdGVtOiByZW1vdmVOYXZpZ2F0aW9uSXRlbVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBuYXZpZ2F0aW9uSXRlbXMgPSBbXTtcblxuICAgICAgICBmdW5jdGlvbiBnZXROYXZpZ2F0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRpb25JdGVtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5hdmlnYXRpb25JdGVtKGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICghbmF2aWdhdGlvbkl0ZW1zKSBuYXZpZ2F0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgICAgIG5hdmlnYXRpb25JdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTmF2aWdhdGlvbkl0ZW0oaXRlbSkge1xuICAgICAgICAgICAgbmF2aWdhdGlvbkl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW1Jbk5hdmlnYXRpb24sIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1Jbk5hdmlnYXRpb24uaWQgPT09IGl0ZW0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbkl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcblwidXNlIHN0cmljdFwiO1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbXBvbmVudChcImd3Um9vbVwiLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiBcInd3dy9hcHAvY29tcG9uZW50cy9yb29tL3Jvb20uaHRtXCIsXG4gICAgICAgIGNvbnRyb2xsZXI6IFwicm9vbUNvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgY29udHJvbGxlckFzOiBcImN0cmxcIlxuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuXHRhbmd1bGFyLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpLmNvbnRyb2xsZXIoXCJyb29tQ29tcG9uZW50Q29udHJvbGxlclwiLCBmdW5jdGlvbiAoYXBwbGljYXRpb25TZXR0aW5ncywgcm9vbVNlcnZpY2UsICRyb3V0ZVBhcmFtcykge1xuXHRcdHRoaXMuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKHRoaXMpO1xuXG5cdFx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXG5cdFx0XHRyb29tU2VydmljZS5nZXRSb29tQnlJZCgkcm91dGVQYXJhbXMuaWQpLnRoZW4oZnVuY3Rpb24gKHJvb21SZXN1bHQpIHtcblx0XHRcdFx0X3RoaXMucm9vbSA9IHJvb21SZXN1bHQ7XG5cdFx0XHRcdF90aGlzLnJvb20ucGljdHVyZSA9IGFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0SW1hZ2VQYXRoKF90aGlzLnJvb20ucGljdHVyZSk7XG5cdFx0XHRcdF90aGlzLmxvYWRpbmcgPSBmYWxzZTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuZmFjdG9yeShcInJvb21TZXJ2aWNlXCIsIGZ1bmN0aW9uICgkaHR0cCwgYXBwbGljYXRpb25TZXR0aW5ncykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd3JpdGVSb29tUmVzZXJ2YXRpb246IHdyaXRlUm9vbVJlc2VydmF0aW9uLFxuICAgICAgICAgICAgZ2V0Um9vbXM6IGdldFJvb21zLFxuICAgICAgICAgICAgZ2V0Um9vbUJ5SWQ6IGdldFJvb21CeUlkLFxuICAgICAgICAgICAgZmV0Y2hSb29tc0Zyb21EQjogZmV0Y2hSb29tc0Zyb21EQlxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByb29tcyA9IG51bGw7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Um9vbXMoKSB7XG4gICAgICAgICAgICByZXR1cm4gcm9vbXM7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRSb29tQnlJZChpZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChhcHBsaWNhdGlvblNldHRpbmdzLmdldEZpcmViYXNlUmVzdFVybChcInJvb21zL1wiICsgaWQpKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGRhdGEuaWQgPSBpZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZmV0Y2hSb29tc0Zyb21EQigpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoYXBwbGljYXRpb25TZXR0aW5ncy5nZXRGaXJlYmFzZVJlc3RVcmwoXCJyb29tc1wiKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJvb21zKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJvb21zLCBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZS5pZCA9IGtleTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByb29tcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gd3JpdGVSb29tUmVzZXJ2YXRpb24oaWQsIHJlc2VydmF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Um9vbUJ5SWQoaWQpLnRoZW4oZnVuY3Rpb24gKHJvb20pIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBnZXQgcm9vbSBzbyBzb21lIHZhbGlkYXRpb24gY291bGQgYmUgcGVyZm9ybWVkIGhlcmUgYmVmb3JlIHdlIHBvc3QsIHRob3VnaCBub3RlIHRoaXMgZG9lc24ndFxuICAgICAgICAgICAgICAgIC8vIGVsaW1pbmF0ZSByYWNlIGNvbmRpdGlvbnNcblxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnRseSwgdGhpcyBqdXN0IHBvc3RzIHRvIHRoZSBjdXJyZW50IGRhdGUgYmVjYXVzZSBub3RoaW5nIGlzIHBhc3NlZCBpbiBnZXRSb29tRGF0ZUtleVxuICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KGFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0RmlyZWJhc2VSZXN0VXJsKFwicm9vbXMvXCIgKyBpZCArIFwiL3Jlc2VydmF0aW9ucy9cIiArIGdldFJvb21EYXRlS2V5KCkpLCByZXNlcnZhdGlvbik7XG4gICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRSb29tRGF0ZUtleShkYXRlKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUtleSA9IHZvaWQgMDtcblxuICAgICAgICAgICAgZGF0ZUtleSA9IGRhdGUgPyBuZXcgRGF0ZShkYXRlKS50b0RhdGVTdHJpbmcoKSA6IG5ldyBEYXRlKCkudG9EYXRlU3RyaW5nKCk7XG4gICAgICAgICAgICBkYXRlS2V5ID0gZGF0ZUtleS5yZXBsYWNlKC8gL2csIFwiXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGF0ZUtleTtcbiAgICAgICAgfVxuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuY29tcG9uZW50KFwiZ3dSb29tUmVzZXJ2YXRpb25Gb3JtXCIsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6IFwid3d3L2FwcC9jb21wb25lbnRzL3Jvb20vcm9vbS1yZXNlcnZhdGlvbi1mb3JtL3Jvb20tcmVzZXJ2YXRpb24tZm9ybS5odG1cIixcbiAgICAgICAgY29udHJvbGxlcjogXCJyb29tUmVzZXJ2YXRpb25Gb3JtQ29tcG9uZW50Q29udHJvbGxlclwiLFxuICAgICAgICBjb250cm9sbGVyQXM6IFwiY3RybFwiLFxuICAgICAgICBiaW5kaW5nczoge1xuICAgICAgICAgICAgcm9vbTogXCI8XCJcbiAgICAgICAgfVxuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuY29udHJvbGxlcihcInJvb21SZXNlcnZhdGlvbkZvcm1Db21wb25lbnRDb250cm9sbGVyXCIsIGZ1bmN0aW9uIChyb29tU2VydmljZSkge1xuICAgICAgICB0aGlzLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcblxuICAgICAgICAgICAgdGhpcy5yZXNlcnZlUmVhc29ucyA9IFtcIkJpcnRoZGF5XCIsIFwiQ29uZmVyZW5jZVwiLCBcIkludGVydmlld1wiLCBcIlNjcnVtIE1lZXRpbmdcIiwgXCJIb25leW1vb25cIl07XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5yb29tU3VibWlzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXNlcnZpbmcgZm9yXCIsIHRoaXMucm9vbSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm15Rm9ybSk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdldE1pblRpbWUoKSA+PSB0aGlzLmVuZFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm15Rm9ybS5lbmRUaW1lLiRzZXRWYWxpZGl0eShcIm1pblwiLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQoXCJNZXNzYWdlIGZyb20gY29udHJvbGxlcjogdGltZSBpbnZhbGlkXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5teUZvcm0uJGludmFsaWQpIHJldHVybiBhbGVydChcIk1lc3NhZ2UgZnJvbSBjb250cm9sbGVyOiBmb3JtIGludmFsaWRcIik7XG5cbiAgICAgICAgICAgIC8vdGFrZSB0aGUgcGllY2VzIG9mIG15Rm9ybSBhbmQgbWVyZ2UgdGhlbSB0byB0aGlzLnJvb20ucmVzZXJ2YXRpb25zIGNvbGxlY3Rpb25cblxuICAgICAgICAgICAgdmFyIHJlc2VydmF0aW9uU3VibWlzc2lvbiA9IHt9O1xuICAgICAgICAgICAgcmVzZXJ2YXRpb25TdWJtaXNzaW9uLmVtYWlsID0gdGhpcy5lbWFpbDE7XG4gICAgICAgICAgICByZXNlcnZhdGlvblN1Ym1pc3Npb24uc3RhcnRUaW1lID0gdGhpcy5zdGFydFRpbWU7XG4gICAgICAgICAgICByZXNlcnZhdGlvblN1Ym1pc3Npb24uZW5kVGltZSA9IHRoaXMuZW5kVGltZTtcbiAgICAgICAgICAgIHJlc2VydmF0aW9uU3VibWlzc2lvbi5zcGVjaWFsSW5zdHJ1Y3Rpb25zID0gdGhpcy5zcGVjaWFsSW5zdHJ1Y3Rpb25zO1xuICAgICAgICAgICAgcmVzZXJ2YXRpb25TdWJtaXNzaW9uLnJlc2VydmVSZWFzb24gPSB0aGlzLnJlc2VydmVSZWFzb247XG5cbiAgICAgICAgICAgIHJldHVybiByb29tU2VydmljZS53cml0ZVJvb21SZXNlcnZhdGlvbih0aGlzLnJvb20uaWQsIHJlc2VydmF0aW9uU3VibWlzc2lvbilcbiAgICAgICAgICAgIC8vIC50aGVuKHRoaXMub25TdWJtaXR0ZWQoKSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQocmVzcG9uc2UuZGF0YS5lcnJvcik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgYWxlcnQoXCJSb29tIHN1Ym1pdHRlZFwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmdldE1pblRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuc3RhcnRUaW1lKTtcbiAgICAgICAgICAgIGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpICsgMSk7XG5cbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9O1xuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXIubW9kdWxlKFwiYXBwbGljYXRpb25cIikuY29tcG9uZW50KFwiZ3dSb29tUmVzZXJ2YXRpb25IZWFkZXJcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWhlYWRlci9yb29tLXJlc2VydmF0aW9uLWhlYWRlci5odG1cIixcbiAgICAgICAgY29udHJvbGxlcjogXCJyb29tUmVzZXJ2YXRpb25IZWFkZXJDb21wb25lbnRDb250cm9sbGVyXCIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCIsXG4gICAgICAgIGJpbmRpbmdzOiB7XG4gICAgICAgICAgICByb29tOiBcIkBcIlxuICAgICAgICB9XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5jb250cm9sbGVyKFwicm9vbVJlc2VydmF0aW9uSGVhZGVyQ29tcG9uZW50Q29udHJvbGxlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaGVhZGVyIGNvbnRyb2xsZXIgd29ya2luZyFcIik7XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5jb21wb25lbnQoXCJnd1Jvb21SZXNlcnZhdGlvbkxpc3RcIiwge1xuICAgICAgICB0ZW1wbGF0ZVVybDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWxpc3Qvcm9vbS1yZXNlcnZhdGlvbi1saXN0Lmh0bVwiLFxuICAgICAgICBjb250cm9sbGVyOiBcInJvb21SZXNlcnZhdGlvbkxpc3RDb21wb25lbnRDb250cm9sbGVyXCIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogXCJjdHJsXCIsXG4gICAgICAgIHJlcXVpcmU6IHtcbiAgICAgICAgICAgIHBhcmVudFJvb21Db250cm9sbGVyOiBcIl5nd1Jvb21cIlxuICAgICAgICB9XG4gICAgfSk7XG59KSh3aW5kb3cuYW5ndWxhcik7XG5cInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhci5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKS5jb250cm9sbGVyKFwicm9vbVJlc2VydmF0aW9uTGlzdENvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxpc3QgY29udHJvbGxlciB3b3JraW5nIVwiKTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTsiLCIoIGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuXHRhbmd1bGFyXHJcblx0XHQubW9kdWxlKFwiYXBwbGljYXRpb25cIiwgW1wibmdSb3V0ZVwiXSlcclxuXHJcblx0XHQuY29uc3RhbnQoXCJhcHBsaWNhdGlvblNldHRpbmdzXCIsIHtcclxuXHRcdFx0YXBwbGljYXRpb25UaXRsZSA6IFwiR2Vla3dpc2UgUm9vbSBSZXNlcnZlIEFwcFwiLFxyXG5cclxuXHRcdFx0Z2V0RmlyZWJhc2VSZXN0VXJsIDogZnVuY3Rpb24oc3VmZml4KSB7XHJcblx0XHRcdFx0Y29uc3QgcHJlZml4ID0gXCJodHRwczovL2NvbmZkZWNvbmZsaWN0b3IuZmlyZWJhc2Vpby5jb20vXCI7XHJcblx0XHRcdFx0Y29uc3QgZXh0ID0gXCIuanNvblwiO1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gcHJlZml4ICsgc3VmZml4ICsgZXh0O1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0Z2V0SW1hZ2VQYXRoIDogZnVuY3Rpb24oZmlsZSkge1xyXG5cdFx0XHRcdHJldHVybiBgd3d3L2Fzc2V0cy9pbWFnZXMvJHtmaWxlfWA7XHJcblx0XHRcdH1cclxuXHRcdH0pXHJcblxyXG5cdFx0LmNvbmZpZyhmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlciwgJHJvdXRlUHJvdmlkZXIpIHtcclxuXHRcdFx0JGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHRydWUpO1xyXG5cclxuXHRcdFx0JHJvdXRlUHJvdmlkZXJcclxuXHRcdFx0XHQvLyAud2hlbihcIi93ZWxjb21lXCIsIHtcclxuXHRcdFx0XHQvLyBcdHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9wYXJ0aWFscy93ZWxjb21lLmh0bVwiXHJcblx0XHRcdFx0Ly8gfSlcclxuXHRcdFx0XHQvLyAud2hlbihcIi9leGVyY2lzZTFcIiwge1xyXG5cdFx0XHRcdC8vIFx0Ly8gc2ltcGxlIGNvbnRyb2xsZXJcclxuXHRcdFx0XHQvLyBcdHRlbXBsYXRlVXJsICA6ICd3d3cvYXBwL3BhcnRpYWxzL2V4ZXJjaXNlMS5odG0nLFxyXG5cdFx0XHRcdC8vIFx0Y29udHJvbGxlciAgIDogXCJleGVyY2lzZU9uZUNvbnRyb2xsZXJcIixcclxuXHRcdFx0XHQvLyBcdGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiLFxyXG5cdFx0XHRcdC8vIH0pXHJcblx0XHRcdFx0Ly8gLndoZW4oXCIvZXhlcmNpc2UyXCIsIHtcclxuXHRcdFx0XHQvLyBcdC8vIG1vcmUgY29tcGxleCBjb250cm9sbGVyXHJcblx0XHRcdFx0Ly8gXHR0ZW1wbGF0ZVVybCAgOiAnd3d3L2FwcC9wYXJ0aWFscy9leGVyY2lzZTIuaHRtJyxcclxuXHRcdFx0XHQvLyBcdGNvbnRyb2xsZXIgICA6IFwiZXhlcmNpc2VUd29Db250cm9sbGVyXCIsXHJcblx0XHRcdFx0Ly8gXHRjb250cm9sbGVyQXMgOiBcImN0cmxcIlxyXG5cdFx0XHRcdC8vIH0pXHJcblx0XHRcdFx0LndoZW4oXCIvbG9naW5cIiwge1xyXG5cdFx0XHRcdFx0dGVtcGxhdGUgIDogXCI8Z3ctbG9naW4+PC9ndy1sb2dpbj5cIlxyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0LndoZW4oXCIvcm9vbS86aWRcIiwge1xyXG5cdFx0XHRcdFx0Ly8gcmVzb2x2ZSAgIDoge1xyXG5cdFx0XHRcdFx0Ly8gXHRpc0xvZ2dlZEluIDogZnVuY3Rpb24gKCRsb2NhdGlvbiwgbG9naW5TZXJ2aWNlKSB7XHJcblx0XHRcdFx0XHQvLyBcdFx0cmV0dXJuICFsb2dpblNlcnZpY2UuZ2V0TG9nZ2VkSW5Vc2VyKCkgPyAkbG9jYXRpb24ucGF0aChcIi93ZWxjb21lXCIpIDogdHJ1ZTtcclxuXHRcdFx0XHRcdC8vIFx0fVxyXG5cdFx0XHRcdFx0Ly8gfSxcclxuXHRcdFx0XHRcdHRlbXBsYXRlICA6IFwiPGd3LXJvb20+PC9ndy1yb29tPlwiXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0XHQub3RoZXJ3aXNlKHtcclxuXHRcdFx0XHRcdHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9jb21wb25lbnRzL3dlbGNvbWUvd2VsY29tZS5odG1cIlxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcbn0gKHdpbmRvdy5hbmd1bGFyKSk7XHJcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpXG4gICAgICAgIC5jb250cm9sbGVyKFwiZXhlcmNpc2VPbmVDb250cm9sbGVyXCIsIGZ1bmN0aW9uKCRyb3V0ZVBhcmFtcywgZXhlcmNpc2VTZXJ2aWNlKSB7XG5cbiAgICAgICAgICAgIHRoaXMuZXhlcmNpc2VTZXJ2aWNlID0gZXhlcmNpc2VTZXJ2aWNlO1xuXG4gICAgXHRcdHRoaXMudGl0bGUgPSBcIkV4ZXJjaXNlIDEsIGluIHRoZSBjb250cm9sbGVyXCI7XG5cbiAgICBcdFx0dGhpcy5jbGlja0FjdGlvbiA9ICgpID0+IHtcbiAgICBcdFx0XHRjb25zb2xlLmxvZyh0aGlzKTtcbiAgICBcdFx0fTtcblxuICAgIFx0XHR0aGlzLnN0dWRlbnRzID0gW1xuICAgIFx0XHRcdHsgbmFtZTogXCJKb2huXCIgfSxcbiAgICBcdFx0XHR7IG5hbWU6IFwiSm9zaFwiIH0sXG4gICAgXHRcdFx0eyBuYW1lOiBcIk1hY2tcIiB9XG4gICAgXHRcdF07XG4gICAgICAgIH0pXG59KHdpbmRvdy5hbmd1bGFyKSlcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpXG4gICAgICAgIC5jb250cm9sbGVyKFwiZXhlcmNpc2VUd29Db250cm9sbGVyXCIsIGZ1bmN0aW9uKCRyb3V0ZVBhcmFtcywgZXhlcmNpc2VTZXJ2aWNlLCBleGVyY2lzZVR3b1NlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZXhlcmNpc2VUd29TZXJ2aWNlID0gZXhlcmNpc2VUd29TZXJ2aWNlO1xuXG4gICAgICAgICAgICB0aGlzLmV4ZXJjaXNlU2VydmljZSA9IGV4ZXJjaXNlU2VydmljZTtcblxuICAgICAgICAgICAgdGhpcy50aXRsZSA9IFwiRXhlcmNpc2UgMlwiO1xuXG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbEJ1dHRvblRleHQgPSBcIkJ1dHRvbiBUZXh0XCI7XG5cbiAgICAgICAgICAgIHRoaXMucG9zc2libGVDb2xvcnMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lIDogXCJCcm93blwiLFxuICAgICAgICAgICAgICAgICAgICBoZXggIDogXCIjYTUyYTJhXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA6IFwiQmx1ZVwiLFxuICAgICAgICAgICAgICAgICAgICBoZXggIDogXCIjMDAwMGZmXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA6IFwiR2FpbnNib3JvXCIsXG4gICAgICAgICAgICAgICAgICAgIGhleCAgOiBcIiNkY2RjZGNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICB0aGlzLl9nZXRSYW5kb21Db2xvckZyb21Db2xsZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCByYW5kb21Db2xvciA9IHRoaXMucG9zc2libGVDb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5wb3NzaWJsZUNvbG9ycy5sZW5ndGgpXVxuICAgICAgICAgICAgICAgIHJldHVybiByYW5kb21Db2xvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb2xvckZpbHRlckNoYW5nZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIXRoaXMuZmlsdGVyLmNvbG9yKSBkZWxldGUgdGhpcy5maWx0ZXIuY29sb3I7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmJ1dHRvblRleHQgPSBvcmlnaW5hbEJ1dHRvblRleHQ7XG5cbiAgICAgICAgICAgIHRoaXMuYnV0dG9uTW91c2VFbnRlciA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IFwiUm9sbGVkIE92ZXJcIlxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5idXR0b25SZXNldENsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uVGV4dCA9IG9yaWdpbmFsQnV0dG9uVGV4dDtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlT2JqZWN0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgICAgICAgOiBcIk9ialwiICsgKHRoaXMub2JqZWN0QXJyYXkubGVuZ3RoICsgMSksXG4gICAgICAgICAgICAgICAgICAgIGNsaWNrQ291bnQgOiAwLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciAgICAgIDogdGhpcy5fZ2V0UmFuZG9tQ29sb3JGcm9tQ29sbGVjdGlvbigpLmhleFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMub2JqZWN0QXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVySW5pdE9iamVjdCA9IHRoaXMuX2NyZWF0ZU9iamVjdCgpO1xuXG4gICAgICAgICAgICB0aGlzLm9iamVjdEFycmF5LnB1c2godGhpcy5jb250cm9sbGVySW5pdE9iamVjdCk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRkTmV3T2JqZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vYmplY3RBcnJheS5wdXNoKHRoaXMuX2NyZWF0ZU9iamVjdCgpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm9iamVjdEFycmF5KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuaW5jckNsaWNrQ291bnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgICAgICBvYmouY2xpY2tDb3VudCsrO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFtvYmoubmFtZSwgb2JqLmNsaWNrQ291bnRdKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSlcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcbiAgICAgICAgLnNlcnZpY2UoXCJleGVyY2lzZVNlcnZpY2VcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlZEluVXNlciA9IHt9O1xuICAgICAgICAgICAgdGhpcy5sb2dpbiA9IF9sb2dpbjtcbiAgICAgICAgICAgIHRoaXMubG9nb3V0ID0gX2xvZ291dDtcbiAgICAgICAgICAgIHRoaXMucHJpbnRDb25zb2xlID0gcHJpbnRDb25zb2xlO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBfbG9naW4oKSB7XG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlZEluVXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSAgICAgIDogXCJDb29sZ3V5XCIsXG4gICAgICAgICAgICAgICAgICAgIHBob3RvICAgICA6IFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2d3SExGMXpxUTl3XCIsXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luVGltZSA6IERhdGUubm93KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIF9sb2dvdXQgKCkge1xuICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VkSW5Vc2VyID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByaW50Q29uc29sZSAoKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2aWNlIFdvcmtzIVwiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC5mYWN0b3J5KFwiZXhlcmNpc2VTZXJ2aWNlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRMb2dnZWRJblVzZXIsXG4gICAgICAgICAgICAgICAgbG9naW4sXG4gICAgICAgICAgICAgICAgbG9nb3V0XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgbG9nZ2VkSW5Vc2VyID0ge307XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldExvZ2dlZEluVXNlcigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VkSW5Vc2VyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBsb2dpbigpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBsb2dnZWRJblVzZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgICAgICA6IFwiVGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIHBob3RvICAgICA6IFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2d3SExGMXpxUTl3XCIsXG4gICAgICAgICAgICAgICAgICAgIGxvZ2luVGltZSA6IERhdGUubm93KClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvZ291dCAoKSB7XG4gICAgICAgICAgICAgICAgbG9nZ2VkSW5Vc2VyID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuc2VydmljZShcImV4ZXJjaXNlVHdvU2VydmljZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFxuXG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcbiAgICAgICAgLmNvbXBvbmVudChcImd3Rm9vdGVyXCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9jb21wb25lbnRzL2Zvb3Rlci9mb290ZXIuaHRtXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyICAgOiBcImZvb3RlckNvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiXG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJmb290ZXJDb21wb25lbnRDb250cm9sbGVyXCIsIGZ1bmN0aW9uKCkge1xuXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZm9vdGVyQ29tcG9uZW50Q29udHJvbGxlciBsb2FkZWQgaGVyZVwiKTtcbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuY29tcG9uZW50KFwiZ3dMb2dpblwiLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybCAgOiBcInd3dy9hcHAvY29tcG9uZW50cy9sb2dpbi9sb2dpbi5odG1cIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwibG9naW5Db21wb25lbnRDb250cm9sbGVyXCIsXG4gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcImN0cmxcIlxuICAgICAgICB9KTtcbn0od2luZG93LmFuZ3VsYXIpKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpXG4gICAgICAgIC5jb250cm9sbGVyKFwibG9naW5Db21wb25lbnRDb250cm9sbGVyXCIsIGZ1bmN0aW9uKCRzY29wZSwgbG9naW5TZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLmxvZ2luU2VydmljZSA9IGxvZ2luU2VydmljZTtcblxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbn0od2luZG93LmFuZ3VsYXIpKTtcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcbiAgICAgICAgLmZhY3RvcnkoXCJsb2dpblNlcnZpY2VcIiwgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICAgICAgICAgICAgbGV0IGxvZ2dlZEluVXNlciA9IG51bGw7XG4gICAgICAgICAgICBsZXQgbm90aWZ5Q29udHJvbGxlckNhbGxiYWNrID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gd2F0Y2hlcyBmaXJlYmFzZSBhdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgZmlyZWJhc2UuYXV0aCgpLm9uQXV0aFN0YXRlQ2hhbmdlZCh1cGRhdGVMb2dpblN0YXR1cyk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2V0TG9nZ2VkSW5Vc2VyLFxuICAgICAgICAgICAgICAgIGxvZ2luLFxuICAgICAgICAgICAgICAgIGxvZ291dFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRMb2dnZWRJblVzZXIoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlZEluVXNlclxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVMb2dpblN0YXR1cyhhdXRoZW50aWNhdGVkVXNlcikge1xuICAgICAgICAgICAgICAgIGxvZ2dlZEluVXNlciA9IGF1dGhlbnRpY2F0ZWRVc2VyO1xuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGxvZ2luIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJlYmFzZS5hdXRoKCkuc2lnbkluV2l0aFBvcHVwKG5ldyBmaXJlYmFzZS5hdXRoLkdpdGh1YkF1dGhQcm92aWRlcigpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbG9nb3V0ICgpIHtcbiAgICAgICAgICAgICAgICBsb2dnZWRJblVzZXIgPSB7fTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyZWJhc2UuYXV0aCgpLnNpZ25PdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuY29tcG9uZW50KFwiZ3dOYXZpZ2F0aW9uXCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9jb21wb25lbnRzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5odG1cIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwibmF2aWdhdGlvbkNvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiXG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcbiAgICAgICAgLmNvbnRyb2xsZXIoXCJuYXZpZ2F0aW9uQ29tcG9uZW50Q29udHJvbGxlclwiLCBmdW5jdGlvbigkc2NvcGUsICRsb2NhdGlvbiwgbmF2aWdhdGlvblNlcnZpY2UsIGxvZ2luU2VydmljZSwgcm9vbVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHRoaXMuJG9uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlID0gbmF2aWdhdGlvblNlcnZpY2U7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpblNlcnZpY2UgPSBsb2dpblNlcnZpY2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yb29tU2VydmljZSA9IHJvb21TZXJ2aWNlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHdlbGNvbWVJdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJXZWxjb21lXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybCAgOiBcIi93ZWxjb21lXCJcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLmFkZE5hdmlnYXRpb25JdGVtKHdlbGNvbWVJdGVtKTtcblxuICAgICAgICAgICAgICAgIHJvb21TZXJ2aWNlLmZldGNoUm9vbXNGcm9tREIoKS50aGVuKHJvb21zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJvb21zLCBmdW5jdGlvbiAob2JqZWN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1Ub0FkZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogb2JqZWN0VmFsdWUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgIDogYC9yb29tLyR7b2JqZWN0VmFsdWUuaWR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvblNlcnZpY2UuYWRkTmF2aWdhdGlvbkl0ZW0oaXRlbVRvQWRkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKGUpKTtcblxuICAgICAgICAgICAgICAgIGxldCBhYm91dEl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkFib3V0XCIsXG4gICAgICAgICAgICAgICAgICAgIHVybCAgOiBcIi9hYm91dFwiXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb25TZXJ2aWNlLmFkZE5hdmlnYXRpb25JdGVtKGFib3V0SXRlbSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc0l0ZW1BY3RpdmUgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybCA9PT0gJGxvY2F0aW9uLnBhdGgoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuXG4gICAgICAgIC5mYWN0b3J5KFwibmF2aWdhdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXROYXZpZ2F0aW9uLFxuICAgICAgICAgICAgICAgIGFkZE5hdmlnYXRpb25JdGVtLFxuICAgICAgICAgICAgICAgIHJlbW92ZU5hdmlnYXRpb25JdGVtXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgbmF2aWdhdGlvbkl0ZW1zID0gW107XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5hdmlnYXRpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRpb25JdGVtcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkTmF2aWdhdGlvbkl0ZW0oaXRlbSkge1xuICAgICAgICAgICAgICAgIGlmICghbmF2aWdhdGlvbkl0ZW1zKSBuYXZpZ2F0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uSXRlbXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlTmF2aWdhdGlvbkl0ZW0oaXRlbSkge1xuICAgICAgICAgICAgICAgIG5hdmlnYXRpb25JdGVtcy5mb3JFYWNoKChpdGVtSW5OYXZpZ2F0aW9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbUluTmF2aWdhdGlvbi5pZCA9PT0gaXRlbS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdGlvbkl0ZW1zLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuY29tcG9uZW50KFwiZ3dSb29tXCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9jb21wb25lbnRzL3Jvb20vcm9vbS5odG1cIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwicm9vbUNvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiXG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKFwiYXBwbGljYXRpb25cIilcblxuXHRcdC5jb250cm9sbGVyKFwicm9vbUNvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24gKGFwcGxpY2F0aW9uU2V0dGluZ3MsIHJvb21TZXJ2aWNlLCAkcm91dGVQYXJhbXMpIHtcblx0XHRcdHRoaXMuJG9uSW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzKTtcblxuXHRcdFx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xuXG5cdFx0XHRcdHJvb21TZXJ2aWNlLmdldFJvb21CeUlkKCRyb3V0ZVBhcmFtcy5pZCkudGhlbihyb29tUmVzdWx0ID0+IHtcblx0XHRcdFx0XHR0aGlzLnJvb20gPSByb29tUmVzdWx0O1xuXHRcdFx0XHRcdHRoaXMucm9vbS5waWN0dXJlID0gYXBwbGljYXRpb25TZXR0aW5ncy5nZXRJbWFnZVBhdGgodGhpcy5yb29tLnBpY3R1cmUpO1xuXHRcdFx0XHRcdHRoaXMubG9hZGluZyA9IGZhbHNlO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcbn0od2luZG93LmFuZ3VsYXIpKTtcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcblxuICAgICAgICAuZmFjdG9yeShcInJvb21TZXJ2aWNlXCIsIGZ1bmN0aW9uKCRodHRwLCBhcHBsaWNhdGlvblNldHRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHdyaXRlUm9vbVJlc2VydmF0aW9uLFxuICAgICAgICAgICAgICAgIGdldFJvb21zLFxuICAgICAgICAgICAgICAgIGdldFJvb21CeUlkLFxuICAgICAgICAgICAgICAgIGZldGNoUm9vbXNGcm9tREJcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCByb29tcyA9IG51bGw7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFJvb21zKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByb29tcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Um9vbUJ5SWQoaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0RmlyZWJhc2VSZXN0VXJsKGByb29tcy8ke2lkfWApKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuaWQgPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmV0Y2hSb29tc0Zyb21EQigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KGFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0RmlyZWJhc2VSZXN0VXJsKFwicm9vbXNcIikpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHJvb21zID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb29tcywgZnVuY3Rpb24odmFsdWUsIGtleSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuaWQgPSBrZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJvb21zO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gd3JpdGVSb29tUmVzZXJ2YXRpb24oaWQsIHJlc2VydmF0aW9uKSB7XG5cdFx0XHRcdHJldHVybiBnZXRSb29tQnlJZChpZClcblx0XHRcdFx0XHQudGhlbihyb29tID0+IHtcblx0XHRcdFx0XHRcdC8vIHdlIGdldCByb29tIHNvIHNvbWUgdmFsaWRhdGlvbiBjb3VsZCBiZSBwZXJmb3JtZWQgaGVyZSBiZWZvcmUgd2UgcG9zdCwgdGhvdWdoIG5vdGUgdGhpcyBkb2Vzbid0XG5cdFx0XHRcdFx0XHQvLyBlbGltaW5hdGUgcmFjZSBjb25kaXRpb25zXG5cblx0XHRcdFx0XHRcdC8vIGN1cnJlbnRseSwgdGhpcyBqdXN0IHBvc3RzIHRvIHRoZSBjdXJyZW50IGRhdGUgYmVjYXVzZSBub3RoaW5nIGlzIHBhc3NlZCBpbiBnZXRSb29tRGF0ZUtleVxuXHRcdFx0XHRcdFx0cmV0dXJuICRodHRwLnBvc3QoYXBwbGljYXRpb25TZXR0aW5ncy5nZXRGaXJlYmFzZVJlc3RVcmwoYHJvb21zLyR7aWR9L3Jlc2VydmF0aW9ucy8ke2dldFJvb21EYXRlS2V5KCl9YCksIHJlc2VydmF0aW9uKTtcblx0XHRcdFx0XHR9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpKVxuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBnZXRSb29tRGF0ZUtleShkYXRlKSB7XG5cdFx0XHRcdGxldCBkYXRlS2V5O1xuXG5cdFx0XHRcdGRhdGVLZXkgPSBkYXRlID8gbmV3IERhdGUoZGF0ZSkudG9EYXRlU3RyaW5nKCkgOiBuZXcgRGF0ZSgpLnRvRGF0ZVN0cmluZygpO1xuXHRcdFx0XHRkYXRlS2V5ID0gZGF0ZUtleS5yZXBsYWNlKC8gL2csIFwiXCIpO1xuXG5cdFx0XHRcdHJldHVybiBkYXRlS2V5O1xuXHRcdFx0fVxuICAgICAgICB9KTtcbn0od2luZG93LmFuZ3VsYXIpKTtcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xuICAgIGFuZ3VsYXJcbiAgICAgICAgLm1vZHVsZShcImFwcGxpY2F0aW9uXCIpXG4gICAgICAgIC5jb21wb25lbnQoXCJnd1Jvb21SZXNlcnZhdGlvbkZvcm1cIiwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmwgIDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWZvcm0vcm9vbS1yZXNlcnZhdGlvbi1mb3JtLmh0bVwiLFxuICAgICAgICAgICAgY29udHJvbGxlciAgIDogXCJyb29tUmVzZXJ2YXRpb25Gb3JtQ29tcG9uZW50Q29udHJvbGxlclwiLFxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJjdHJsXCIsXG4gICAgICAgICAgICBiaW5kaW5ncyAgICAgOiB7XG4gICAgICAgICAgICAgICAgcm9vbSA6IFwiPFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcblxuICAgICAgICAuY29udHJvbGxlcihcInJvb21SZXNlcnZhdGlvbkZvcm1Db21wb25lbnRDb250cm9sbGVyXCIsIGZ1bmN0aW9uKHJvb21TZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZFRpbWUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlc2VydmVSZWFzb25zID0gW1xuICAgICAgICAgICAgICAgICAgICBcIkJpcnRoZGF5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiQ29uZmVyZW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICBcIkludGVydmlld1wiLFxuICAgICAgICAgICAgICAgICAgICBcIlNjcnVtIE1lZXRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJIb25leW1vb25cIlxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMucm9vbVN1Ym1pc3Npb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVzZXJ2aW5nIGZvclwiLCB0aGlzLnJvb20pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMubXlGb3JtKTtcblxuXHRcdFx0XHRpZiAodGhpcy5nZXRNaW5UaW1lKCkgPj0gdGhpcy5lbmRUaW1lKSB7XG5cdFx0XHRcdFx0dGhpcy5teUZvcm0uZW5kVGltZS4kc2V0VmFsaWRpdHkoXCJtaW5cIiwgZmFsc2UpXG5cblx0XHRcdFx0XHRyZXR1cm4gYWxlcnQoXCJNZXNzYWdlIGZyb20gY29udHJvbGxlcjogdGltZSBpbnZhbGlkXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMubXlGb3JtLiRpbnZhbGlkKSByZXR1cm4gYWxlcnQoXCJNZXNzYWdlIGZyb20gY29udHJvbGxlcjogZm9ybSBpbnZhbGlkXCIpO1xuXG4gICAgICAgICAgICAgICAgLy90YWtlIHRoZSBwaWVjZXMgb2YgbXlGb3JtIGFuZCBtZXJnZSB0aGVtIHRvIHRoaXMucm9vbS5yZXNlcnZhdGlvbnMgY29sbGVjdGlvblxuXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzZXJ2YXRpb25TdWJtaXNzaW9uID0ge307XG4gICAgICAgICAgICAgICAgcmVzZXJ2YXRpb25TdWJtaXNzaW9uLmVtYWlsID0gdGhpcy5lbWFpbDE7XG4gICAgICAgICAgICAgICAgcmVzZXJ2YXRpb25TdWJtaXNzaW9uLnN0YXJ0VGltZSA9IHRoaXMuc3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgIHJlc2VydmF0aW9uU3VibWlzc2lvbi5lbmRUaW1lID0gdGhpcy5lbmRUaW1lO1xuICAgICAgICAgICAgICAgIHJlc2VydmF0aW9uU3VibWlzc2lvbi5zcGVjaWFsSW5zdHJ1Y3Rpb25zID0gdGhpcy5zcGVjaWFsSW5zdHJ1Y3Rpb25zO1xuICAgICAgICAgICAgICAgIHJlc2VydmF0aW9uU3VibWlzc2lvbi5yZXNlcnZlUmVhc29uID0gdGhpcy5yZXNlcnZlUmVhc29uO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvb21TZXJ2aWNlLndyaXRlUm9vbVJlc2VydmF0aW9uKHRoaXMucm9vbS5pZCwgcmVzZXJ2YXRpb25TdWJtaXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAvLyAudGhlbih0aGlzLm9uU3VibWl0dGVkKCkpXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaChyZXNwb25zZSA9PiBhbGVydChyZXNwb25zZS5kYXRhLmVycm9yKSk7XG5cblx0XHRcdFx0YWxlcnQoXCJSb29tIHN1Ym1pdHRlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nZXRNaW5UaW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxldCBkYXRlID0gbmV3IERhdGUodGhpcy5zdGFydFRpbWUpO1xuXHRcdFx0XHRkYXRlLnNldEhvdXJzKGRhdGUuZ2V0SG91cnMoKSArIDEpO1xuXG5cdFx0XHRcdHJldHVybiBkYXRlO1xuXHRcdFx0fTtcbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuY29tcG9uZW50KFwiZ3dSb29tUmVzZXJ2YXRpb25IZWFkZXJcIiwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmwgIDogXCJ3d3cvYXBwL2NvbXBvbmVudHMvcm9vbS9yb29tLXJlc2VydmF0aW9uLWhlYWRlci9yb29tLXJlc2VydmF0aW9uLWhlYWRlci5odG1cIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwicm9vbVJlc2VydmF0aW9uSGVhZGVyQ29tcG9uZW50Q29udHJvbGxlclwiLFxuICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJjdHJsXCIsXG4gICAgICAgICAgICBiaW5kaW5ncyAgICAgOiB7XG4gICAgICAgICAgICAgICAgcm9vbSA6IFwiQFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufSh3aW5kb3cuYW5ndWxhcikpO1xuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKFwiYXBwbGljYXRpb25cIilcblxuICAgICAgICAuY29udHJvbGxlcihcInJvb21SZXNlcnZhdGlvbkhlYWRlckNvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImhlYWRlciBjb250cm9sbGVyIHdvcmtpbmchXCIpXG4gICAgICAgIH0pO1xuXG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuICAgICAgICAuY29tcG9uZW50KFwiZ3dSb29tUmVzZXJ2YXRpb25MaXN0XCIsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsICA6IFwid3d3L2FwcC9jb21wb25lbnRzL3Jvb20vcm9vbS1yZXNlcnZhdGlvbi1saXN0L3Jvb20tcmVzZXJ2YXRpb24tbGlzdC5odG1cIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwicm9vbVJlc2VydmF0aW9uTGlzdENvbXBvbmVudENvbnRyb2xsZXJcIixcbiAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiY3RybFwiLFxuICAgICAgICAgICAgcmVxdWlyZSAgICAgIDoge1xuICAgICAgICAgICAgICAgIHBhcmVudFJvb21Db250cm9sbGVyIDogXCJeZ3dSb29tXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG59KHdpbmRvdy5hbmd1bGFyKSk7XG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoXCJhcHBsaWNhdGlvblwiKVxuXG4gICAgICAgIC5jb250cm9sbGVyKFwicm9vbVJlc2VydmF0aW9uTGlzdENvbXBvbmVudENvbnRyb2xsZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxpc3QgY29udHJvbGxlciB3b3JraW5nIVwiKVxuICAgICAgICB9KTtcblxufSh3aW5kb3cuYW5ndWxhcikpO1xuIl19
